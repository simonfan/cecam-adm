var gulp        = require('gulp');
// Load all installed gulp plugins into $
var $ = require('gulp-load-plugins')();
var polybuild = require('polybuild');

var rimraf = require('rimraf');
var mergeStream = require('merge-stream');

var browserSync = require('browser-sync');

var path = require('path');

var config = {
  srcDir: 'src'
};

// Message to be prepended to all .css files generated via less
var cssMessage = [
  '/*----------------------------------------------------',
  ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
  ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
  ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
  ' | This file was generated by LESS.                   |',
  ' | All modifications to it will be lost, mercilessly! |',
  ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
  ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
  ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
  ' -----------------------------------------------------*/\n\n',
].join('\n');

var autoprefixerOptions = {
  browsers: [
    'ie >= 10',
    'ie_mob >= 10',
    'ff >= 30',
    'chrome >= 34',
    'safari >= 7',
    'opera >= 23',
    'ios >= 7',
    'android >= 4.4',
    'bb >= 10'
  ],
  cascade: false,
};

var lessErrorNotifyOptions = {
  title: 'Less compiling error',
  message: '<%= error.message %>',
  open: 'file:///<%= error.filename %>',
  sound: 'Glass',
  // Basso, Blow, Bottle, Frog, Funk, Glass, Hero,
  // Morse, Ping, Pop, Purr, Sosumi, Submarine, Tink
};

/**
 * Compile the less for the application
 * At the end, generate a ".css" file
 */
gulp.task('less', function () {

  return gulp.src(config.srcDir + '/index.less')
    .pipe($.changed(config.srcDir, { extension: '.css' }))
    .pipe($.less())
    .on('error', $.notify.onError(lessErrorNotifyOptions))
    .pipe($.rename(function (filePath) {
      filePath.basename += '.bundle';
    }))
    .pipe($.autoprefixer(autoprefixerOptions))
    .pipe($.header(cssMessage))
    .pipe(gulp.dest(config.srcDir))
    .pipe($.size({
      title: 'less',
      showFiles: true
    }));
});

/**
 * Watches files for changes and acts accordingly
 */
gulp.task('watch', function () {

  // HTML
  gulp.watch(['src/**/*.html', '!src/bower_components/**/*'])
    .on('change', browserSync.reload);
  
  // JS 
  gulp.watch(['src/**/*.js', '!src/bower_components/**/*'])
    .on('change', browserSync.reload);

  // LESS
  gulp.watch(['src/**/*.less', '!src/bower_components/**/*'], ['less']);
  gulp.watch(['src/**/*.css', '!src/bower_components/**/*'])
    .on('change', browserSync.reload);
});

// Static server
gulp.task('serve:develop', function() {

  var bs = browserSync({
    ghostMode: false,
    port: 4000,
    server: {
      baseDir: 'src',
    },
    open: true,
  });

});

// Static server
gulp.task('serve:dist', function() {

  var bs = browserSync({
    ghostMode: false,
    port: 4000,
    server: {
      baseDir: 'dist',
    },
    open: true,
  });

});

gulp.task('distribute', function() {
  rimraf.sync(path.join(__dirname, 'dist'));

  var copySrc = [
    'src/templates/**/*.html',
    'src/bower_components/font-awesome/fonts/**/*'
  ];

  var copyStream = gulp.src(copySrc, { base: 'src' }).pipe(gulp.dest('dist'));

  var buildStream = gulp.src('src/index.html')
    .pipe(polybuild({
      maximumCrush: false
    }))
    .pipe($.if('index.build.html', $.rename('index.html')))
    .pipe(gulp.dest('dist'));

  return mergeStream([copyStream, buildStream]);
});

gulp.task('develop', ['watch', 'serve:develop']);